name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r . deploy/
        cd deploy
        rm -rf node_modules .git tests test-data .github
        npm ci --omit=dev
        tar -czf ../app.tar.gz .
    
    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT }}
        script: |
          # Stop the existing application
          sudo systemctl stop time-management-app || true
          
          # Create application directory
          sudo mkdir -p /opt/time-management-app
          sudo chown ${{ secrets.DO_USERNAME }}:${{ secrets.DO_USERNAME }} /opt/time-management-app
          
          # Create data directory for persistent storage
          sudo mkdir -p /opt/time-management-data
          sudo chown ${{ secrets.DO_USERNAME }}:${{ secrets.DO_USERNAME }} /opt/time-management-data
          
          # Backup existing data
          if [ -d "/opt/time-management-data/data" ]; then
            sudo cp -r /opt/time-management-data/data /opt/time-management-data/backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          cd /opt/time-management-app
          
          # Clean up old files
          rm -rf app.tar.gz
    
    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT }}
        source: "app.tar.gz"
        target: "/opt/time-management-app"
    
    - name: Extract and start application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT }}
        script: |
          cd /opt/time-management-app
          
          # Extract new application
          tar -xzf app.tar.gz
          rm app.tar.gz
          
          # Set environment variables
          echo "NODE_ENV=production" > .env
          echo "PORT=3000" >> .env
          echo "DATA_PATH=/opt/time-management-data" >> .env
          
          # Install PM2 if not already installed
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2
          fi
          
          # Start the application with PM2
          pm2 delete time-management-app || true
          pm2 start server.js --name time-management-app --env production
          pm2 save
          pm2 startup systemd -u ${{ secrets.DO_USERNAME }} --hp /home/${{ secrets.DO_USERNAME }}
          
          # Setup nginx reverse proxy if not already done
          if [ ! -f "/etc/nginx/sites-available/time-management-app" ]; then
            sudo tee /etc/nginx/sites-available/time-management-app > /dev/null <<EOF
          server {
              listen 80;
              server_name ${{ secrets.DO_DOMAIN }};
              
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          EOF
            sudo ln -sf /etc/nginx/sites-available/time-management-app /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl reload nginx
          fi
          
          # Health check
          sleep 5
          curl -f http://localhost:3000/health || exit 1
          
          echo "Deployment completed successfully!"